name: CI run on PR
on:
  pull_request:
    types: [ opened, synchronize, reopened, ready_for_review ]

env:
  # Golang version to use across CI steps
  GOLANG_VERSION: '1.25'

permissions:
  contents: read

jobs:
  fail_if_pull_request_is_draft:
    if: ${{ github.event.pull_request.draft == true }}
    runs-on: ubuntu-22.04
    steps:
      - name: Fails in order to indicate that pull request needs to be marked as ready to review and other checks needs to pass.
        run: exit 1
  
  codechanges:
    if: ${{ github.event.pull_request.draft == false }}
    runs-on: ubuntu-22.04
    outputs:
      backend: ${{ steps.filter.outputs.backend_any_changed || steps.filter.outputs.ci_any_changed }}
    steps:
      - uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493 # v4.0.0
      - uses: tj-actions/changed-files@24d32ffd492484c1d75e0c0b894501ddb9d30d62 # v47.0.0
        id: filter
        with:
          # Any file which is not under docs/, examples/, or is not a markdown file is counted as a backend file
          # Also run when ci-run-on-pr has been changed to validate it is working
          files_yaml: |
            backend:
              - '!**.md'
              - '!**/*.md'
              - '!docs/**'
              - '!examples/**'
              - '!.github/**'
            ci:
              - '.github/workflows/ci-run-on-pr.yaml'
  
  check-go:
    name: Ensure Go modules synchronicity
    runs-on: ubuntu-22.04
    if: ${{ needs.codechanges.outputs.backend == 'true' && github.event.pull_request.draft == false}}
    needs:
      - codechanges
    steps:
      - name: Checkout code
        uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493 # v4.0.0
      - name: Setup Golang
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
        with:
          go-version: ${{ env.GOLANG_VERSION }}
      - name: Download all Go modules
        run: |
          go mod download
      - name: Check for tidiness of go.mod and go.sum
        run: |
          go mod tidy
          git diff --exit-code -- .
  
  lint-go:
    name: Lint Go code
    runs-on: ubuntu-22.04
    if: ${{ needs.codechanges.outputs.backend == 'true' && github.event.pull_request.draft == false}}
    needs:
      - codechanges
    permissions:
      contents: read # for actions/checkout to fetch code
      pull-requests: read # for golangci/golangci-lint-action to fetch pull requests
    steps:
      - name: Checkout code
        uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493 # v4.0.0
      - name: Setup Golang
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
        with:
          go-version: ${{ env.GOLANG_VERSION }}
      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@4afd733a84b1f43292c63897423277bb7f4313a9 # v8.0.0
        with:
          version: v2.4.0
          args: --verbose
 
  unit-test:
    name: Run unit tests
    runs-on: ubuntu-22.04
    if: ${{ needs.codechanges.outputs.backend == 'true' && github.event.pull_request.draft == false}}
    needs:
      - codechanges
    steps:
      - name: Checkout code
        uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493 # v4.0.0
      - name: Setup Golang
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
        with:
          go-version: ${{ env.GOLANG_VERSION }}
      - name: Test
        run: make test
      - name: Generate test results artifacts
        uses: actions/upload-artifact@330a01c490aca151604b8cf639adc76d48f6c5d4 # v5.0.0
        with:
          name: unittests-coverage
          path: cover.out
  
  test-coverage:
    name: Analyze test coverage
    if: ${{ needs.codechanges.outputs.backend == 'true' && github.event.pull_request.draft == false}}
    runs-on: ubuntu-22.04
    needs:
      - unit-test
      - codechanges
    steps:
      - name: Checkout code
        uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493 # v4.0.0
      - name: Get unit test code coverage
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          name: unittests-coverage
      - name: Generate and print report
        run: go tool cover -func=cover.out > full-coverage
      - name: Upload test-coverage artifact
        uses: actions/upload-artifact@330a01c490aca151604b8cf639adc76d48f6c5d4 # v5.0.0
        with:
          name: full-coverage-report
          path: full-coverage
      - name: Report coverage threshold
        run: |
          coverage=$(go tool cover -func=cover.out | grep "total:" | awk '{print $NF}' | cut -d'%' -f1)
          if [ "$(echo "$coverage < 80" | bc)" -eq 1 ]; then
            echo -e "\033[31mERR: Coverage is less than 80% ($coverage%). Please improve the tests.\033[0m"
          else
            echo -e "\033[32mINFO: Coverage is sufficient ($coverage%). Good job!\033[0m"
          fi
