{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"about/code-of-conduct/","title":"Code of Conduct","text":"<p>The Paas Crypttool project follows the CNCF Code of Conduct.</p>"},{"location":"about/contributing/","title":"Contributing to the PaaS Crypttool","text":"<p>Welcome! We are glad that you want to contribute to our PaaS Crypttool project! \ud83d\udc96</p> <p>As you get started, you are in the best position to give us feedbacks on areas of our project that we need help with, including:</p> <ul> <li>Problems found while setting up the development environment;</li> <li>Gaps in our documentation;</li> <li>Bugs in our Github actions;</li> </ul> <p>First, though, it is important that you read the Code of Conduct.</p> <p>The guidelines below are a starting point. We don't want to limit your creativity, passion, and initiative. If you think there's a better way, please feel free to bring it up in a Github discussion, or open a pull request. We're certain there are always better ways to do things, we just need to start some constructive dialogue!</p>"},{"location":"about/contributing/#ways-to-contribute","title":"Ways to contribute","text":"<p>We welcome many types of contributions including:</p> <ul> <li>New features;</li> <li>Builds, CI/CD changes;</li> <li>Bug fixes;</li> <li>Documentation;</li> <li>Issue Triage;</li> <li>Answering questions on Github Discussions;</li> <li>Communications / Social Media / Blog Posts;</li> <li>Events participation;</li> <li>Release management;</li> </ul> <p>For more details on development contributions, please refer to the \"Developer Guide\" section on the documentation site.</p>"},{"location":"about/contributing/#raising-issues","title":"Raising Issues","text":"<p>When you want to raise an issue, use GitHub Issues.</p> <p>If you are trying to report a vulnerability, please make sure to read the security policy.</p>"},{"location":"about/license/","title":"License","text":"<p>The Paas Crypttool is being made available under the European Union Public License (EUPL) v1.2, which is available in multiple languages.</p> <p>For your convenience, you can find the full, english language version below.</p>"},{"location":"about/branding/","title":"Branding","text":"<p>The Paas Crypttool, like many open source projects, has a logo. You can find the source of this logo (.svg format, made with Inkscape) in the <code>docs/about/branding</code> directory of the Git repository.</p> <p>You can also find a set of larger and smaller .png versions in that same directory, which are included on this page.</p> <p>\u00a9 2025 Tax Administration of The Netherlands.</p> <p>The branding, logo and its related assets are all: \u00a9 copyright 2025 Tax Administration of The Netherlands.</p>"},{"location":"about/branding/#logo","title":"Logo","text":""},{"location":"about/branding/#svg-formatted-source","title":"SVG formatted source","text":"<p>The file was created with Inkscape 1.4.</p> SVG source file"},{"location":"about/branding/#png-formatted-size-variants","title":"PNG formatted size variants","text":"16x16px 32x32px 120x80px 149x100px 180x180px 400x400px 500x335px"},{"location":"development-guide/","title":"Contributing to crypttool source code","text":"<p>If you want to contribute to the source code of the crypttool, this is the right place. Welcome!</p> <p>We have a truly open source soul. That's why we welcome new contributors. Our goal is to enable you to become the next committer of the crypttool, by having a good set of docs that guide you through the development process. Having said this, we know that everything can always be improved, so if you think our documentation is not up to scratch, please let us know or provide a pull request based on your experience.</p>"},{"location":"development-guide/#development-workflow","title":"Development workflow","text":"<p>The crypttool project follows trunk-based development, with the <code>main</code> branch representing the trunk.</p> <p>We adopt the \"Github Flow\" development workflow, with some customizations:</p> <ul> <li>the Continuous Delivery   branch is called <code>main</code> and is protected;</li> <li>Github is configured for linear development (no merge commits);</li> <li>development happens in separate branches created from the <code>main</code> branch and   called \"dev/ISSUE_ID\";</li> <li>once completed, developers must submit a pull request;</li> <li>reviews by two different maintainers are required before a pull request can be   merged;</li> </ul> <p>We also adopted the conventional commit format for commit messages.</p>"},{"location":"development-guide/#your-development-environment-for-crypttool","title":"Your development environment for crypttool","text":"<p>In order to write even the simplest patch for crypttool you must have setup your workstation to build and locally test the version of the operator you are developing.</p>"},{"location":"development-guide/#submit-a-pull-request","title":"Submit a pull request","text":"<p>First and foremost: as a potential contributor, your changes and ideas are welcome at any hour of the day or night, weekdays, weekends, and holidays. Please do not ever hesitate to ask a question or send a PR.</p> <p>IMPORTANT: before you submit a pull request, please read this document from the Istio documentation which contains very good insights and best practices: \"Writing Good Pull Requests\".</p> <p>If you have written code for an improvement to the crypttool or a bug fix, please follow this procedure to submit a pull request:</p> <ol> <li>Create a personal fork of the project;</li> <li>If there is a related issue, please leave a comment that you intend to work on it;</li> <li>Once development is finished, create a pull request from your forked project    to the crypttool project;</li> </ol> <p>Please make sure the pull request title and message follow Conventional Commits For more details on submitting a PR, see \"Submitting A PR\".</p> <p>One of the maintainers will then proceed with the first review and approve the CI workflow to run in the crypttool project.  The second reviewer will run end-to-end test against the changes in fork pull request. If testing passes, the pull request will be labeled with <code>ok-to-merge</code> and will be ready for merge.</p>"},{"location":"development-guide/#sign-your-work","title":"Sign your work","text":"<p>We use the Developer Certificate of Origin (DCO) as an additional safeguard for the project. This is a well established and widely used mechanism to assure contributors have confirmed their right to license their contribution under the project's license.</p> <p>Please read https://developercertificate.org.</p> <p>If you can certify it, then just add a line to every git commit message:</p> <pre><code>  Signed-off-by: Random J Developer &lt;random@developer.example.org&gt;\n</code></pre> <p>or use the command <code>git commit -s -m \"commit message comes here\"</code> to sign-off on your commits.</p> <p>Use your real name (sorry, no pseudonyms or anonymous contributions). If you set your <code>user.name</code> and <code>user.email</code> git configs, you can sign your commit automatically with <code>git commit -s</code>.</p> <p>You can also use git aliases like <code>git config --global alias.ci 'commit -s'</code>. Now you can commit with <code>git ci</code> and the commit will be signed.</p>"},{"location":"development-guide/20_issues/","title":"Raising Issues","text":"<p>When raising issues, please specify the following:</p> <ul> <li>Setup details as specified in the issue template</li> <li>A scenario where the issue occurred (with details on how to reproduce it)</li> <li>Errors and log messages that are displayed by the involved software</li> <li>Any other detail that might be useful</li> </ul> <p>For security related issues, we have a dedicated security policy.</p>"},{"location":"development-guide/30_submitting-a-pr/","title":"Submitting a Pull Request","text":"<p>First and foremost: as a potential contributor, your changes and ideas are welcome at any hour of the day or night, weekdays, weekends, and holidays. Please do not ever hesitate to ask a question or send a PR.</p> <p>Tip</p> <p>Before you submit a pull request, please read this document from the Istio documentation which contains very good insights and best practices: \"Writing Good Pull Requests\".</p> <p>If you have written code for an improvement to Crypttool or a bug fix, please follow this procedure to submit a pull request:</p> <ol> <li>Create a fork of the project;</li> <li>Add a comment to the related issue to let us know you're working on it;</li> <li>Develop your feature or fix on your forked repository;</li> <li>Once development is finished, create a pull request from your forked project    to the crypttool project.    Please make sure the pull request title and message follow Conventional Commits</li> </ol> <p>One of the maintainers will then proceed with the first review and approve the CI workflow to run in the crypttool project. If testing passes, the pull request will be labeled with <code>ok-to-merge</code> and will be ready for merge.</p>"},{"location":"development-guide/30_submitting-a-pr/#sign-your-work","title":"Sign your work","text":"<p>We use the Developer Certificate of Origin (DCO) as an additional safeguard for the crypttool project. This is a well established and widely used mechanism to assure contributors have confirmed their right to license their contribution under the project's license.</p> <p>Please read https://developercertificate.org.</p> <p>If you can certify it, then just add a line to every git commit message:</p> <p>Example</p> <pre><code>  Signed-off-by: Random J Developer &lt;random@developer.example.org&gt;\n</code></pre> <p>or use the command <code>git commit -s -m \"commit message comes here\"</code> to sign-off on your commits.</p> <p>Use your real name (sorry, no pseudonyms or anonymous contributions). If you set your <code>user.name</code> and <code>user.email</code> git configs, you can sign your commit automatically with <code>git commit -s</code>.</p> <p>You can also use git aliases like <code>git config --global alias.ci 'commit -s'</code>. Now you can commit with <code>git ci</code> and the commit will be signed.</p>"},{"location":"development-guide/31_writing-good-pull-request/","title":"Writing Good Pull Requests","text":"<p>Note</p> <p>The following text was shamelessly copied in full from the Istio project. The original lives at: https://github.com/istio/istio/wiki/Writing-Good-Pull-Requests</p> <p>The reason for including the text here, is that we really liked the content and did not want to run the risk of having a broken link / losing the content in the future should the original ever be moved or deleted.</p> <p>One of the biggest bottlenecks we have in Istio is PR reviews. By creating good PRs, you can help the reviewers go through your PR easily and get it checked-in quickly. This is a set of guidelines for creating good pull requests.</p> <ul> <li>Communicate beforehand<ul> <li>Open a tracking issue</li> <li>Use work-in-progress PRs for early feedback</li> </ul> </li> <li>Add a good explanation</li> <li>Keep it short</li> <li>Organize into commits</li> <li>Add tests!</li> <li>Tracking future work</li> </ul>"},{"location":"development-guide/31_writing-good-pull-request/#communicate-beforehand-ie-why-are-you-doing-this","title":"Communicate beforehand (i.e. why are you doing this?)","text":"<p>It's awful when a reviewer rejects your PR, or objects to your design. You now have to throw away your carefully crafted and authored PR and start over.</p> <p>If you communicate your intent for the change to the reviewer beforehand and agree on the design, there is much less of a chance of outright rejection of PRs, or substantial change requests. It also gives an opportunity for the reviewer to think about the problem and think about how the system behavior would change, before they start reviewing the code.</p>"},{"location":"development-guide/31_writing-good-pull-request/#open-a-tracking-issue","title":"Open a tracking issue","text":"<p>Unless the PR is trivial, it is a good idea to open a bug to track the issue first. Especially if this is for fixing a bug. This allows capturing more detailed analysis (and repro steps if this is a bug) separately. It can also be used to track multiple PRs against the same problem.</p>"},{"location":"development-guide/31_writing-good-pull-request/#use-work-in-progress-prs-for-early-feedback","title":"Use work-in-progress PRs for early feedback","text":"<p>A good way to communicate before investing too much time is to create a \"Work-in-progress\" PR and share it with your reviewers. The standard way of doing this is to add a \"WIP:\" prefix in your PR's title. This will let people looking at your PR know that it is not well baked yet. Our infrastructure also understands that the PR is not ready for merging yet, and will not allow accidental merging.</p>"},{"location":"development-guide/31_writing-good-pull-request/#add-a-good-explanation-ie-what-exactly-are-you-doing","title":"Add a good explanation (i.e. what exactly are you doing?)","text":"<p>If you just write a cryptic title and nothing else, there is not much to go with for the reviewer. The reviewer will need to reconstruct what you're trying to accomplish from your code, which is not an easy task.</p> <p>Writing a good, short, to the point explanation of what is going in your commits is extremely useful for the reviewer. If there are multiple things going on (i.e. a needed refactoring, a trivial bug fix you happened to catch along the way, an issue that you found for which you're adding a TODO for), add these as bullet-points in your PR description.</p> <p>This not only helps the reviewer, but also people that are looking at the repo history, trying to figure out what has changed in a particular pull request.</p> <p>Do:</p> <pre><code>Subject: Fix bug(#449) that causes Foo component to crash when flag is not set.\nDescription:\n+ This is caused by an off-by-one failure during iteration of nukes to launch.\n+ Also fixed a race condition by adding a lock on the trigger mechanism that caused concurrent launches that caused a crash in the silo.\n+ Adding a TODO for refactoring the code as well, as the cold war is over and we don't need this particular\ndefense mechanism anymore.\n</code></pre> <p>Don't</p> <pre><code>Subject: Fix minor bug.\nDescription:\n</code></pre>"},{"location":"development-guide/31_writing-good-pull-request/#keep-it-short","title":"Keep it short","text":"<p>The shorter the PR, the easier to review. Reviewing a PR requires the reviewer to understand how the system behavior is being changed. With bigger PRs, this becomes harder to understand, especially with the diff based nature of the review tools.</p> <p>Keep your PRs as short as possible. A good rule of thumb is that if you PR ends up touching more than 500 lines, you should considering breaking it up into smaller PRs.</p> <p>If there are refactorings that you've decided to do along the way, move them to a separate PR so that real changes aren't mingled with no-brainer refactoring changes.</p>"},{"location":"development-guide/31_writing-good-pull-request/#organize-into-commits","title":"Organize into commits","text":"<p>If you must merge large changes, all in one go, then consider splitting your changes into multiple commits within the same pull request. This allows the reviewer to compartmentalize your changes and review them in isolation.</p> <p>When making changes that are requested by your reviewers, add them as additional commits, instead of squashing it into the original. This allows the reviewer to quickly spot that his feedback is being incorporated.</p>"},{"location":"development-guide/31_writing-good-pull-request/#add-tests-ie-does-it-actually-work","title":"Add tests! (i.e. does it actually work?)","text":"<p>Whatever the issue you're fixing, add tests! Adding tests are the best way to convince the reviewer that what you're doing actually works. It also makes sure that the product will not regress and the issue will not occur again.</p> <p>It is crucial to add the right type of tests. If the issue you are fixing is due to a particular library (e.g. cache library race condition causing cache poisoning), it is perfectly reasonable to write a small unit-test to avoid the regression.</p> <p>However, if the issue is larger scoped (e.g. change in product behavior), then it is important to add the right integration or end-to-end test to verify the behavior.</p>"},{"location":"development-guide/31_writing-good-pull-request/#tracking-future-work","title":"Tracking future work","text":"<p>Sometimes in the course of a PR review, a reviewer will point out more work that should be done as part of the change. When this happens, it is common for the author of the PR to say \"Good idea, I'll do that in a follow-up PR\". As part of this, it's generally desirable for the author to open a new issue (assuming there isn't one already) to track this extra work. The issue # should be included in the original PR so that the reviewer can rest assured that the work will not be forgotten.</p>"},{"location":"development-guide/60_writing-documentation/","title":"Writing Documentation","text":"<p>Our project utilizes a structured approach to documentation to ensure clarity and ease of access for all users. All documentation is written in Markdown and stored within the <code>docs</code> directory of the repository. The first level of directories under <code>docs</code> corresponds to the main sections of our documentation site:</p> <ul> <li><code>overview</code></li> <li><code>development-guide</code></li> <li><code>about</code></li> </ul> <p>We use MkDocs along with the Material for MkDocs theme to generate a professional and user-friendly documentation site from this structure.</p>"},{"location":"development-guide/60_writing-documentation/#writing-clear-and-effective-documentation","title":"Writing Clear and Effective Documentation","text":"<p>When contributing to the documentation, please aim to keep your writing simple and factual. Clear and concise documentation helps users understand and utilize our project more effectively.</p>"},{"location":"development-guide/60_writing-documentation/#tips-for-writing-good-documentation","title":"Tips for Writing Good Documentation","text":"<p>Be Concise and Direct: Use straightforward language and get to the point quickly. Avoid unnecessary words or overly complex sentences.</p> <p>Use Active Voice: Write in active voice to make your writing more engaging and easier to understand. For example, we would prefer the use of \"Install the package using...\" over \"The package can be installed using...\".</p> <p>Organize Content Logically: Break down information into logical sections and use headings and subheadings to guide the reader. This makes it easier for users to find the information they need.</p> <p>Ensure that you place your documentation in the right sub-section for your intended reader.</p> <p>Use Lists and Bullet Points: When presenting multiple items or steps, use lists to improve readability.</p> <p>Include Examples and Call Outs: Provide code snippets or command-line examples where applicable to illustrate your points.</p> <p>Tip</p> <p>Use call outs like this to highlight important information. You can use \"note\", \"abstract\", \"info\", \"tip\", \"success\", \"question\", \"warning\", \"failure\", \"danger\", \"bug\", \"example\" and \"quote\".</p> <p>See the docs for more information.</p> <p>Maintain Consistent Formatting: Try to follow the existing style and formatting conventions used in the rest of the documentation. This includes heading styles, code block formatting, and emphasis.</p> <p>Proofread Your Work: Check for spelling and grammar errors before submitting. Reading your text aloud can help identify awkward phrasing or mistakes.</p> <p>By following these guidelines, you'll help maintain a high standard of quality in our documentation, making it a valuable resource for everyone involved in the project.</p>"},{"location":"development-guide/maintaining/","title":"Introduction","text":"<p>This file documents the methods and standards that should be applied by the maintainers of this project. For example: how to create a new release.</p>"},{"location":"development-guide/maintaining/#standards-used","title":"Standards used","text":""},{"location":"development-guide/maintaining/#commits","title":"Commits","text":"<p>We adhere to the Conventional Commits v1.0 standard.</p>"},{"location":"development-guide/maintaining/#versioning","title":"Versioning","text":"<p>For versioning purposes, we adhere to the SemVer v2.0.0 standard with a side note that we always prefix the semantic version number with the character 'v'. This stands for \"version\".</p> <p>As a quick summary, this means we use version numbers in the style of vX.Y.Z. With:</p> <ul> <li>X being major, including breaking, changes;</li> <li>Y being minor, possibly including patch but never breaking, changes;</li> <li>Z being patch, but never breaking, changes;</li> </ul>"},{"location":"development-guide/maintaining/#methods-used","title":"Methods used","text":""},{"location":"development-guide/maintaining/#creating-a-release","title":"Creating a release","text":"<p>We release from <code>main</code>. All changes to <code>main</code> are made through PRs. Merging a PR will trigger the release drafter action to create a draft release.</p> <p>The process to create a release is mostly automated, to start it:</p> <ul> <li>Merge one or more PRs to <code>main</code>;</li> <li>Ensure completeness;</li> <li>Edit the draft release and publish it;</li> </ul>"},{"location":"overview/","title":"Introduction to the Crypttool","text":"<p>The goal is to provide a tool that can be used by operators to encrypt and decrypt secrets in their PAAS files using public keys provided by the operator.</p> <p>The tool can also be used to decrypt secrets in PAAS files using the old public keys provided by the operator and then re-encrypt them with a new key.</p> <p>This can be used by operators who have a new key and are ready to replace the old keys, for example as part of a migration process or as part of a regular key rotation process.</p> <p>This documentation site is arranged into a generic section called overview and a developer section.</p> <p>If you have any questions or feel that certain parts of the documentation can be improved or expanded, feel free to create a PR (Pull Request).</p> <p>For full contribution guidelines, see the <code>CONTRIBUTING.md</code> file in the root of the repository, the About &gt;&gt; Contributing section and/or the Development Guide.</p>"},{"location":"overview/#basic-usage","title":"Basic usage","text":""},{"location":"overview/#re-encrypting-secrets-with-a-new-key","title":"Re-encrypting secrets with a new key","text":"<p>The most common use case is to re-encrypt secrets in PAAS files using a new key:</p> <p><code>crypttool reencrypt --privateKeyFiles \"/tmp/priv\" --publicKeyFile \"/tmp/pub\" [file or dir] ([file or dir]...)</code></p>"},{"location":"overview/#creating-a-new-key-pair","title":"Creating a new key pair","text":"<p>You can create a new key pair with the <code>keygen</code> command. This will generate a new key pair and save it to a file.</p> <p><code>crypttool generate --publicKeyFile \"/tmp/pub\" --privateKeyFile \"/tmp/priv\"</code></p>"},{"location":"overview/#encrypting-secrets-in-paas-files","title":"Encrypting secrets in PAAS files","text":"<p>The <code>encrypt</code> command can be used to encrypt secrets in PAAS files. This will create a new encrypted version of the file, using the key pair specified with the <code>--publicKeyFile</code> flag.</p> <p><code>crypttool encrypt --publicKeyFile \"/tmp/pub\" --dataFile \"/tmp/decrypted\" --paas my-paas</code></p>"},{"location":"overview/#decrypting-secrets-in-paas-files","title":"Decrypting secrets in PAAS files","text":"<p>The <code>decrypt</code> command can be used to decrypt secrets in PAAS files. This will create a new decrypted version of the file, using the key pair specified with the <code>--publicKeyFile</code> flag.</p> <p><code>crypttool decrypt --privateKeyFiles \"/tmp/priv\" --paas my-paas</code></p>"}]}